# Server Info
server_name: ${SERVER_NAME}
host: 0.0.0.0
port: ${CLIENT_PORT}
http_port: ${HTTP_PORT}
debug: true
trace: true

# Operator named NATSSYS
operator: eyJ0eXAiOiJKV1QiLCJhbGciOiJlZDI1NTE5LW5rZXkifQ.eyJqdGkiOiI0R1dYSTdFMkFORVVUWUZTSDQzVk5aTTNXS0s2T1FSUUtaVjVORktNWEZDTjNUVlZOMzRBIiwiaWF0IjoxNzQyODI0NTg2LCJpc3MiOiJPQVZUWVVHQUVEN0ZHTlFLSk9DVlNFQ0xSS1hMV0ZGQk9MU0lFM01FVEcySzJLWlBPU01CVjczViIsIm5hbWUiOiJOQVRTU1lTIiwic3ViIjoiT0FWVFlVR0FFRDdGR05RS0pPQ1ZTRUNMUktYTFdGRkJPTFNJRTNNRVRHMksyS1pQT1NNQlY3M1YiLCJuYXRzIjp7InR5cGUiOiJvcGVyYXRvciIsInZlcnNpb24iOjJ9fQ._KkzGBQHPoO8W19Gd6EdOYFAQ9YEIXpIZgYZgFJbOd4ufocRDUVZNT3UGsagwnLZZV-DO7d5Ki7iBQdNMERPBQ
# System Account named SYS
system_account: AABLXRJ5BEL6G7BLXASV4CAW2GSU7YLEDMOLOT7NIBM4VM66XO7OHZIM

# configuration of the nats based resolver
resolver {
    type: full
    # Directory in which the account jwt will be stored
    dir: './jwt'
    # In order to support jwt deletion, set to true
    # If the resolver type is full delete will rename the jwt.
    # This is to allow manual restoration in case of inadvertent deletion.
    # To restore a jwt, remove the added suffix .delete and restart or send a reload signal.
    # To free up storage you must manually delete files with the suffix .delete.
    allow_delete: false
    # Interval at which a nats-server with a nats based account resolver will compare
    # it's state with one random nats based account resolver in the cluster and if needed, 
    # exchange jwt and converge on the same set of jwt.
    interval: "2m"
    # Timeout for lookup requests in case an account does not exist locally.
    timeout: "1.9s"
}


# Preload the nats based resolver with the system account jwt.
# This is not necessary but avoids a bootstrapping system account. 
# This only applies to the system account. Therefore other account jwt are not included here.
# To populate the resolver:
# 1) make sure that your operator has the account server URL pointing at your nats servers.
#    The url must start with: "nats://" 
#    nsc edit operator --account-jwt-server-url nats://localhost:4222
# 2) push your accounts using: nsc push --all
#    The argument to push -u is optional if your account server url is set as described.
# 3) to prune accounts use: nsc push --prune 
#    In order to enable prune you must set above allow_delete to true
# Later changes to the system account take precedence over the system account jwt listed here.
resolver_preload: {
	AABLXRJ5BEL6G7BLXASV4CAW2GSU7YLEDMOLOT7NIBM4VM66XO7OHZIM: eyJ0eXAiOiJKV1QiLCJhbGciOiJlZDI1NTE5LW5rZXkifQ.eyJqdGkiOiJTSEdPRkFRUFpQT01YN0JONUFTNUxPTUFDMjZXUDMzWFg3NkZDUlRaTUpGV1Y3R1haVlpBIiwiaWF0IjoxNzQyODI0NjEyLCJpc3MiOiJPQVZUWVVHQUVEN0ZHTlFLSk9DVlNFQ0xSS1hMV0ZGQk9MU0lFM01FVEcySzJLWlBPU01CVjczViIsIm5hbWUiOiJTWVMiLCJzdWIiOiJBQUJMWFJKNUJFTDZHN0JMWEFTVjRDQVcyR1NVN1lMRURNT0xPVDdOSUJNNFZNNjZYTzdPSFpJTSIsIm5hdHMiOnsibGltaXRzIjp7InN1YnMiOi0xLCJkYXRhIjotMSwicGF5bG9hZCI6LTEsImltcG9ydHMiOi0xLCJleHBvcnRzIjotMSwid2lsZGNhcmRzIjp0cnVlLCJjb25uIjotMSwibGVhZiI6LTF9LCJkZWZhdWx0X3Blcm1pc3Npb25zIjp7InB1YiI6e30sInN1YiI6e319LCJhdXRob3JpemF0aW9uIjp7fSwidHlwZSI6ImFjY291bnQiLCJ2ZXJzaW9uIjoyfX0.6oPHzkuA-Y06zebKZ808S4F2uQI_IvsVEf_zG17GJ9Y5sjEEYYsYrmgEwWXSMPCLo0_LC__7athX8SRuVG4zDA,
}


# Authentication and Accounts
accounts {
  SYS: {
    users: [
      {user: "${SYSTEM_USER}", password: "${SYSTEM_PASSWORD}"}
    ]
  }
  
  DEFAULT: {
    users: [
      {user: "${CLIENT_USER}", password: "${CLIENT_PASSWORD}"}
    ],
    jetstream: enabled
  }
}

system_account: SYS

# TLS Configuration (general)
tls {
  cert_file: "${TLS_CERT}"
  key_file: "${TLS_KEY}"
  ca_file: "${TLS_CA}"
  verify: true
  timeout: ${TLS_TIMEOUT}
}

# Clustering (Routes)
cluster {
  name: "nats-cluster"
  host: 0.0.0.0
  port: ${ROUTES_PORT}
  
  routes: [
    "nats://${PRIVATE_JETSTREAM_IP}:${ROUTES_PORT}",
    "nats://${PUBLIC_JETSTREAM_IP}:${ROUTES_PORT}"
  ]
  
  tls {
    cert_file: "${TLS_CERT}"
    key_file: "${TLS_KEY}"
    ca_file: "${TLS_CA}"
    verify: true
    timeout: ${TLS_TIMEOUT}
  }
  
  # Authentication for routes
  authorization {
    user: "${ROUTES_USER}"
    password: "${ROUTES_PASSWORD}"
    timeout: ${TLS_TIMEOUT}
  }
}

# Gateway Configuration
gateway {
  name: "${SERVER_NAME}-gateway"
  host: 0.0.0.0
  port: ${GATEWAY_PORT}
  
  # Add authentication for all gateway connections
  authorization {
    user: "${GATEWAY_USER}"
    password: "${GATEWAY_PASSWORD}"
    timeout: ${TLS_TIMEOUT}
  }
  
  gateways: [
    {
      name: "${SERVER_NAME == 'nats-server-1' ? 'nats-server-2' : 'nats-server-1'}-gateway"
      url: "nats://${GATEWAY_USER}:${GATEWAY_PASSWORD}@${SERVER_NAME == 'nats-server-1' ? PUBLIC_JETSTREAM_IP : PRIVATE_JETSTREAM_IP}:${GATEWAY_PORT}"
      tls {
        cert_file: "${TLS_CERT}"
        key_file: "${TLS_KEY}"
        ca_file: "${TLS_CA}"
        timeout: ${TLS_TIMEOUT}
      }
    }
  ]
}

# Leaf Nodes Configuration
leafnodes {
  port: ${LEAF_PORT}
  
  # Add authentication for leaf nodes
  authorization {
    user: "${LEAF_USER}"
    password: "${LEAF_PASSWORD}"
    timeout: ${TLS_TIMEOUT}
  }
  
  # Solicited Leaf Node for system account connection
  remotes [
    {
      # Include credentials in URL
      url: "nats://${LEAF_USER}:${LEAF_PASSWORD}@${SERVER_NAME == 'nats-server-1' ? PUBLIC_JETSTREAM_IP : PRIVATE_JETSTREAM_IP}:${LEAF_PORT}"
      account: "SYS"
      tls {
        cert_file: "${TLS_CERT}"
        key_file: "${TLS_KEY}"
        ca_file: "${TLS_CA}"
      }
    }
  ]
  
  tls {
    cert_file: "${TLS_CERT}"
    key_file: "${TLS_KEY}"
    ca_file: "${TLS_CA}"
    verify: true
    timeout: ${TLS_TIMEOUT}
  }
}

# JetStream Configuration
jetstream {
  store_dir: "${JS_STORE_DIR}"
  max_mem: ${JS_MAX_MEM}
  max_file: ${JS_MAX_FILE}
  domain: "${JETSTREAM_DOMAIN}"
}
